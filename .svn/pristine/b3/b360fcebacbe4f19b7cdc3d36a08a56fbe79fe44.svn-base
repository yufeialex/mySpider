package cn.ac.iscas.spider.utils;

import java.beans.XMLDecoder;
import java.beans.XMLEncoder;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLDecoder;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Logger;

import cn.ac.iscas.spider.queue.DetailUrlQueue;



/**
 * @author dragonwu
 * @version 创建时间：2015年6月25日 上午10:56:42
 * 类说明
 */
public class FileOperation {
	private static final Logger logger = Logger.getLogger(FileOperation.class
			.getName());
	/***
	 * 根据参数路径遍历磁盘 获取文件列表
	 * 
	 * @param initial
	 * @return fileListG 文件列表
	 */
	private LinkedList<File> fileListG = new LinkedList<File>();

	public List<File> getFileList(String initialPath) {
		if (initialPath == null)
			throw new NullPointerException();
		File file = new File(initialPath);
		if (file.isDirectory()) {
			File[] fileList = file.listFiles();
			if (fileList != null)
				for (File childF : fileList) {
					if (childF.isDirectory()) {
						getFileList(childF.getAbsolutePath());
					} else {
						fileListG.add(childF);
					}
				}
		}
		return fileListG;
	}

	public void serialization(String pathname, Object obj) {
		try {
			File file = new File(pathname);
			OutputStream fos = new FileOutputStream(file);
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			oos.writeObject(obj);
			oos.flush();
			oos.close();
		} catch (FileNotFoundException e) {
			logger.info(e.getMessage());
		} catch (IOException e) {
			logger.info(e.getMessage());
		}
	}

	public Object deserialization(String pathname) {
		Object objChile = null;
		FileInputStream fis;
		try {
			fis = new FileInputStream(new File(pathname));
			ObjectInputStream ois = new ObjectInputStream(fis);
			objChile = ois.readObject();
			ois.close();
		} catch (FileNotFoundException e) {
			logger.info(e.getMessage());
		} catch (IOException e) {
			logger.info(e.getMessage());
		} catch (ClassNotFoundException e) {
			logger.info(e.getMessage());
		}
		return objChile;
	}

	public void writeFile(String pathName, String text) {
		try {
			FileWriter fw = new FileWriter(new File(pathName));
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(text);
			bw.flush();
			bw.close();
			fw.close();
		} catch (IOException e) {
			logger.info(e.getMessage());
		}
	}

	public void serialization(File file, Object obj) {
		try {
			OutputStream fos = new FileOutputStream(file);
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			oos.writeObject(obj);
			oos.flush();
			oos.close();
		} catch (FileNotFoundException e) {
			logger.info(e.getMessage());
		} catch (IOException e) {
			logger.info(e.getMessage());
		}
	}

	public Object deserialization(File file) {
		Object objChile = null;
		FileInputStream fis;
		try {
			fis = new FileInputStream(file);
			ObjectInputStream ois = new ObjectInputStream(fis);
			objChile = ois.readObject();
			ois.close();
		} catch (FileNotFoundException e) {
			logger.info(e.getMessage());
		} catch (IOException e) {
			logger.info(e.getMessage());
		} catch (ClassNotFoundException e) {
			logger.info(e.getMessage());
		}
		return objChile;
	}

	public Object ReadSerializableDateXML(String pathname) {
		File fin = new File(pathname);
		FileInputStream fis;
		Object obj = null;
		try {
			fis = new FileInputStream(fin);
			XMLDecoder decoder = new XMLDecoder(fis);
			obj = decoder.readObject();
			fis.close();
			decoder.close();
		} catch (FileNotFoundException e) {
			logger.info(e.getMessage());
		} catch (IOException e) {
			logger.info(e.getMessage());
		}
		return obj;
	}

	public void WriteSerializableDateXML(String pathname, Object obj) {
		try {
			File fo = new File(pathname);
			FileOutputStream fos = new FileOutputStream(fo);
			XMLEncoder encoder = new XMLEncoder(fos);
			encoder.writeObject(obj);
			encoder.flush();
			encoder.close();
			fos.close();
		} catch (FileNotFoundException e) {
			logger.info(e.getMessage());
		} catch (IOException e) {
			logger.info(e.getMessage());
		}
	}

	/****
	 * 获取classPath
	 */
	public String getClassPath() {
		URL url = FileOperation.class.getProtectionDomain().getCodeSource().getLocation(); // Gets the path
		String jarPath = null;
		try {
			jarPath = URLDecoder.decode(url.getFile(), "UTF-8"); // Should fix
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		String parentPath = new File(jarPath).getParentFile().getPath(); // Path
		parentPath = parentPath + File.separator;
		return parentPath;
	}

	/***
	 * 根据需要查找的文件名字 在path下查找配置文件路径
	 */
	public String queryFilePath(String path, String propertyFileName) {
		for (File file : new FileOperation().getFileList(path)) {
			if (file.getName().equals(propertyFileName))
				return file.getAbsolutePath();
		}
		return null;
	}

	public String readFile(String path, String charset) {
		if (path == null || charset == null)
			throw new NullPointerException();
		File file = new File(path);
		StringBuilder sb = new StringBuilder();
		BufferedReader br = null;
		InputStreamReader isr = null;
		try {
			FileInputStream fis = new FileInputStream(file);
			isr = new InputStreamReader(fis, charset);
			br = new BufferedReader(isr);
			while (br.ready())
				sb.append(br.readLine());
		} catch (FileNotFoundException e) {
			logger.info(e.getMessage());
		} catch (UnsupportedEncodingException e) {
			logger.info(e.getMessage());
		} catch (IOException e) {
			logger.info(e.getMessage());
		} finally {
			try {
				br.close();
				isr.close();
			} catch (IOException e) {
				logger.info(e.getMessage());
			}
		}
		return sb.toString();
	}

	public String readFile(File file, String charset) {
		StringBuilder sb = new StringBuilder();
		BufferedReader br = null;
		InputStreamReader isr = null;
		try {
			FileInputStream fis = new FileInputStream(file);
			isr = new InputStreamReader(fis, charset);
			br = new BufferedReader(isr);
			while (br.ready())
				sb.append(br.readLine());
		} catch (FileNotFoundException e) {
			logger.info(e.getMessage());
		} catch (UnsupportedEncodingException e) {
			logger.info(e.getMessage());
		} catch (IOException e) {
			logger.info(e.getMessage());
		} finally {
			try {
				br.close();
				isr.close();
			} catch (IOException e) {
				logger.info(e.getMessage());
			}
		}
		return sb.toString();
	}
}
