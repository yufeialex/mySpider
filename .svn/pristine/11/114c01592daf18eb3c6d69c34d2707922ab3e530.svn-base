package cn.ac.iscas.spider.proxy;

import java.io.BufferedReader;


import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpHost;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.impl.client.DefaultHttpClient;

import cn.ac.iscas.spider.utils.FileOperation;
import cn.ac.iscas.spider.utils.PropertyConfig;
/**
 * @author dragonwu
 * @version 创建时间：2015年6月25日 上午10:56:42
 * 类说明
 */
public class HttpProxy {
	
	public HttpProxy() {
		List<File> fileL=new FileOperation().getFileList(PropertyConfig.getPropertyV("PROXY"));
		if(fileL!=null)
		for(File file:fileL)
		{
			try {
				BufferedReader br=new BufferedReader(new FileReader(file));
				while(br.ready())
				{
					String str=br.readLine();
					if(str==null|"".equals(str.trim()))
						continue;
					ProxyIP proxyIP=new ProxyIP();
					proxyIP.setIp(str.split("\t")[0]);
					proxyIP.setPort(Integer.parseInt(str.split("\t")[1]));
					try {
						proxyIP.setUsername(str.split("\t")[2]);
						proxyIP.setPassword(str.split("\t")[3]);
						proxyIP.setEncryptedString(str.split("\t")[4]);
					} catch (Throwable e) {
					}
					piL.add(proxyIP);
				}
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	private boolean onOff=false;
	
	
	public boolean isOnOff() {
		return onOff;
	}

	private List<ProxyIP> piL=new ArrayList<ProxyIP>();
	private static HttpProxy httpProxy=null;
	public static synchronized HttpProxy getInstance() {
			if(httpProxy==null)
				httpProxy=new HttpProxy();
		return httpProxy;
	}
	
	public  String proxy(DefaultHttpClient defaultHttpClient) {
		if(!onOff||piL.size()<1)
			return null;
		ProxyIP proxyIP=piL.get((int)Math.round(Math.random() * (piL.size()-1)));
		HttpHost httpHost=new HttpHost(proxyIP.getIp(),proxyIP.getPort(), "http");
		defaultHttpClient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,httpHost);
		return proxyIP.getIp();
	}
	public ProxyIP proxy() {
		if(!onOff||piL.size()<1)
			return null;
		ProxyIP proxyIP=piL.get((int)Math.round(Math.random() * (piL.size()-1)));
		return proxyIP;
	}
	
	
	public void onOff(boolean bool)
	{
		if(bool==true)
		{
			onOff=true;
		}else{
			onOff=false;
		}
	}
	
	public static class ProxyIP{
		 String ip;
		 int port;
		 String username;
		 String password;
		 String encryptedString;
		 public String getIp() {
			return ip;
		}
		public void setIp(String ip) {
			this.ip = ip;
		}
		public int getPort() {
			return port;
		}
		public void setPort(int port) {
			this.port = port;
		}
		public String getUsername() {
			return username;
		}
		public void setUsername(String username) {
			this.username = username;
		}
		public String getPassword() {
			return password;
		}
		public void setPassword(String password) {
			this.password = password;
		}
		public String getEncryptedString() {
			return encryptedString;
		}
		public void setEncryptedString(String encryptedString) {
			this.encryptedString = encryptedString;
		}
	}
}
